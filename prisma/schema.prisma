// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model StudentApplication {
  id                  String   @id @default(uuid())
  studentID           String   @unique
  institute           String
  department          String
  admission           String
  firstName           String
  fatherName          String
  gFatherName         String
  sex                 String
  dob                 DateTime?

  region              String
  zone                String
  woreda              String
  studentPhone        String
  studentEmail        String

  enrolledBefore      String
  postSecondary       PostSecondaryEducation[]

  sponsor             String?
  sponsorName         String?
  sponsorRegion       String?
  sponsorZone         String?
  sponsorWoreda       String?
  sponsorEmail        String?
  sponsorURL          String?

  signed              Boolean
  studentPhotoUrl     String? // File uploads handled via cloud storage
  diplomaUrl          String?
  highSchoolUrl       String?
  grade12Url          String?
  grade10Url          String?
  grade8Url           String?

  status              String
  createdAt           DateTime @default(now())
}

model PostSecondaryEducation {
  id          String   @id @default(uuid())
  application StudentApplication @relation(fields: [applicationId], references: [id])
  applicationId String
  institutionName String
  country     String
  cgpaEarned  String
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  password    String
  role        String
  email       String
  name        String
  createdAt   DateTime @default(now())
}


model College {
  id               Int               @id @default(autoincrement())
  name             String
  programs         Program[]
  availableCollege AvailableCollege[]
}

model Program {
  id                Int                @id @default(autoincrement())
  name              String
  year              Int
  college           College            @relation(fields: [collegeId], references: [id])
  collegeId         Int
  availablePrograms AvailableProgram[]
}

model AdmissionConfig {
  id                  Int      @id @default(autoincrement())
  applicationStart    DateTime
  applicationDeadline DateTime
  createdAt           DateTime @default(now())
}

model AvailableCollege {
  id                Int               @id @default(autoincrement())
  college           College           @relation(fields: [collegeId], references: [id])
  collegeId         Int
  programs          AvailableProgram[]
}

model AvailableProgram {
  id                 Int               @id @default(autoincrement())
  program            Program           @relation(fields: [programId], references: [id])
  programId          Int
  availableCollege   AvailableCollege  @relation(fields: [availableCollegeId], references: [id])
  availableCollegeId Int

  @@unique([programId, availableCollegeId])
}
